# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'programUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import threading
import time
import numpy as np
import requests
import random
from datetime import datetime
from PyQt5 import QtCore, QtGui, QtWidgets

numThreads : int

# array of urls to check
urls = [
]

# array to store each product log
logs = []

stopButtonPressed = False


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stopButton = QtWidgets.QPushButton(self.centralwidget)
        self.stopButton.setGeometry(QtCore.QRect(110, 40, 75, 23))
        self.stopButton.setObjectName("stopButton")
        self.logsOutput = QtWidgets.QTextEdit(self.centralwidget, readOnly=True)
        self.logsOutput.setGeometry(QtCore.QRect(410, 20, 381, 531))
        self.logsOutput.setTextInteractionFlags(QtCore.Qt.TextSelectableByKeyboard|QtCore.Qt.TextSelectableByMouse)
        self.logsOutput.setObjectName("logsOutput")
        self.startButton = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.startButtonClicked())
        self.startButton.setGeometry(QtCore.QRect(30, 40, 75, 23))
        self.startButton.setObjectName("startButton")
        self.urlsView = QtWidgets.QListView(self.centralwidget)
        self.urlsView.setGeometry(QtCore.QRect(30, 350, 321, 192))
        self.urlsView.setUniformItemSizes(False)
        self.urlsView.setObjectName("urlsView")
        self.url_input = QtWidgets.QTextEdit(self.centralwidget)
        self.url_input.setGeometry(QtCore.QRect(30, 310, 321, 31))
        self.url_input.setAcceptDrops(True)
        self.url_input.setInputMethodHints(QtCore.Qt.ImhMultiLine|QtCore.Qt.ImhUrlCharactersOnly)
        self.url_input.setAcceptRichText(False)
        self.url_input.setObjectName("url_input")
        self.addButton = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.addUrl())
        self.addButton.setGeometry(QtCore.QRect(30, 250, 75, 23))
        self.addButton.setObjectName("addButton")
        self.deleteButton = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.deleteUrl())
        self.deleteButton.setEnabled(True)
        self.deleteButton.setGeometry(QtCore.QRect(110, 250, 75, 23))
        self.deleteButton.setObjectName("deleteButton")
        self.radioButtonGroup = QtWidgets.QButtonGroup()
        self.radioButtonGroup.setObjectName("radioButtonGroup")
        self.radioButtonGroup.setExclusive(True)
        self.url0_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.url0_radioButton.setGeometry(QtCore.QRect(40, 360, 82, 17))
        self.url0_radioButton.setObjectName("url0_radioButton")
        self.url1_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.url1_radioButton.setGeometry(QtCore.QRect(40, 380, 82, 17))
        self.url1_radioButton.setObjectName("url1_radioButton")
        self.url2_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.url2_radioButton.setGeometry(QtCore.QRect(40, 400, 82, 17))
        self.url2_radioButton.setObjectName("url2_radioButton")
        self.url3_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.url3_radioButton.setGeometry(QtCore.QRect(40, 420, 82, 17))
        self.url3_radioButton.setObjectName("url3_radioButton")
        self.url4_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.url4_radioButton.setGeometry(QtCore.QRect(40, 440, 82, 17))
        self.url4_radioButton.setObjectName("url4_radioButton")
        self.url5_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.url5_radioButton.setGeometry(QtCore.QRect(40, 460, 82, 17))
        self.url5_radioButton.setObjectName("url5_radioButton")
        self.radioButtonGroup.addButton(self.url0_radioButton)
        self.radioButtonGroup.addButton(self.url1_radioButton)
        self.radioButtonGroup.addButton(self.url2_radioButton)
        self.radioButtonGroup.addButton(self.url3_radioButton)
        self.radioButtonGroup.addButton(self.url4_radioButton)
        self.radioButtonGroup.addButton(self.url5_radioButton)
        self.threadSpinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.threadSpinBox.valueChanged.connect(self.updateNumThreads)
        self.threadSpinBox.setGeometry(QtCore.QRect(30, 70, 42, 22))
        self.threadSpinBox.setAccessibleName("")
        self.threadSpinBox.setSuffix("")
        self.threadSpinBox.setMinimum(1)
        self.threadSpinBox.setMaximum(4)
        self.threadSpinBox.setObjectName("threadSpinBox")
        self.threadCountLabel = QtWidgets.QLabel(self.centralwidget)
        self.threadCountLabel.setEnabled(True)
        self.threadCountLabel.setGeometry(QtCore.QRect(80, 70, 71, 16))
        self.threadCountLabel.setObjectName("threadCountLabel")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    #function that starts stockChecker
    def startButtonClicked(self):
        #get urls as an array from the listview
        global urls
        #get thread count from spinbox
        global numThreads
        #get stop button status
        global stopButtonPressed

        #split urls into Chunks
        urlChunks = np.array_split(urls, numThreads)

        global logs
        logs = ["" for i in range(len(urls))]

        # any error that may occur will either be caused by spam detection or website traffic/outage
        try:
            # initialize mutex lock
            lock = threading.Lock()

            # create threads to handle each url
            for i in range(numThreads):
                thread = threading.Thread(target=newEgg, args=(lock, urlChunks[i], i))
                thread.start()

            # joins threads together when done. newEgg() will not run anymore in this iteration
            for i in range(numThreads):
                thread.join()

            # update logsOutput
            self.updateLogsOutput()
    


        except Exception as e:
            # handles any error that may occur as stated above, and quits the program accordingly.
            print('Detected by captcha! Exiting program.')
            print(e)
            quit()


        # program waits a random amount of time between 3.0 to 6.0 seconds
        # theoretically, less likely to activate website captcha that would break the program
        time.sleep(random.uniform(3, 6))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.startButton.setText(_translate("MainWindow", "Start"))
        self.stopButton.setText(_translate("MainWindow", "Stop"))
        self.addButton.setText(_translate("MainWindow", "Add"))
        self.deleteButton.setText(_translate("MainWindow", "Delete"))
        self.url0_radioButton.setText(_translate("MainWindow", "No URL"))
        self.url1_radioButton.setText(_translate("MainWindow", "No URL"))
        self.url2_radioButton.setText(_translate("MainWindow", "No URL"))
        self.url3_radioButton.setText(_translate("MainWindow", "No URL"))
        self.url4_radioButton.setText(_translate("MainWindow", "No URL"))
        self.url5_radioButton.setText(_translate("MainWindow", "No URL"))
        self.threadCountLabel.setText(_translate("MainWindow", "Thread Count"))
    
    #function that adds a url from url_input to the listview
    def addUrl(self):
        #get url from url_input
        global urls
        #add url to urlsView
        urls.append(self.url_input.toPlainText())
        #add url to the first empty url_radioButton
        for radioButton in self.radioButtonGroup.buttons():
            if radioButton.text() == "No URL":
                radioButton.setText(self.url_input.toPlainText())
                print("hello")
                break
        self.url_input.clear()
    
    #function that deletes the selected url from the listview
    def deleteUrl(self):
        global urls
        #delete url from urlsView
        urls.remove(self.url_input.toPlainText())
        #delete url from based on radio button selected
        for radioButton in self.radioButtonGroup.buttons():
            if radioButton.isChecked() :
                radioButton.setText("No URL")
                break


    #function that updates the numThreads variable
    def updateNumThreads(self):
        global numThreads
        numThreads = self.threadSpinBox.value()
    
    #function that sets stopButtonPressed to True
    def stop(self):
        global stopButtonPressed
        stopButtonPressed = True

    # function that redoes the log output and adds a newline after each log element
    def updateLogsOutput(self):
        global logs
        self.logsOutput.clear()
        self.logsOutput.append("\n".join(logs))


    

    
        



def getTime():
    # timezone formatting
    utcTime = datetime.utcnow()
    return utcTime.strftime('%Y-%m-%d %H:%M:%S')

# handles http get requests, uses mutex lock to isolate the critical section
def checkNeweggStock(url, lock):
    local = "http://localhost:5000/api/v1/request"
    jsonData = {"apikey": "cffb0029-bbfe-40c0-8f20-fc76c15fd51b",
                "url": url}
    #lock.acquire()
    response = requests.post(local, json=jsonData)
    #lock.release()

    #writes html response to a file
    with open('htmlResponse.txt', 'w') as f:
        f.write(str(response.content))


    # string holding all HTML code
    return str(response.content)


# function that checks the stock of a given URL
def newEgg(lock, urlChunk, tid):
    # Loop through the URLs array for this thread
    for i in range(len(urlChunk)):
        lock.acquire()
        # HTML Response Data
        htmlResponse = checkNeweggStock(urlChunk[i], lock)

        # Parse the relevant information from the HTML response
        inStock = bool(htmlResponse[htmlResponse.index('"Instock"') + 10:htmlResponse.index('"Stock"') - 1])
        price = htmlResponse[htmlResponse.index('"FinalPrice":') + 13:htmlResponse.index('"Instock"') - 1]
        shipping = htmlResponse[htmlResponse.index('"ShippingCharge"') + 17:htmlResponse.index('"VFAvail"') - 1]
        quantity = int(htmlResponse[htmlResponse.index('"Qty":')+6:htmlResponse.index('"UnitCost"') - 1])
        productName = htmlResponse[htmlResponse.index('<title>') + 7:htmlResponse.index('</title>') - 13]

        currentTime = getTime()

        if inStock:
            # Create the log message for in-stock items
            inStockLog = f"{currentTime} NEWEGG - {productName} | Price: ${price} Shipping Cost: ${shipping} Quantity: {quantity}"

            # Store the log message in the appropriate index of the logs array
            logs[(len(urlChunk)*tid) + i] = inStockLog
        else:
            # Create the log message for out-of-stock items
            outOfStockLog = f"{currentTime} NEWEGG - {productName} | OUT OF STOCK"
            # Store the log message in the appropriate index of the logs array
            logs[(len(urlChunk)*tid) + i] = outOfStockLog
        lock.release()





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
